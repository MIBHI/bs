'use strict';

/** @namespace Bs.Storage.Cookie */
	// TODO
Bs.define('Bs.Storage.Cookie', {
	construct: function () {
		if (typeof window.document !== 'object') {
			throw new Error('Cookie.js requires a `window` with a `document` object');
		}

		var _document = window.document;

		/**
		 * Used to ensure cookie keys do not collide with built-in `Object` properties
		 *
		 * @type {string}
		 * @private
		 */
		var _cacheKeyPrefix = 'bs.';

		var _maxExpireDate = new Date('Fri, 31 Dec 9999 23:59:59 UTC');

		var Cookie = function (key, value, options) {
			return arguments.length === 1 ? Cookie.get(key) : Cookie.set(key, value, options);
		};

		Cookie.defaults = {
			path  : '/',
			secure: false
		};

		Cookie.get = function (key) {
			if (Cookie._cachedDocumentCookie !== _document.cookie) {
				_renewCache();
			}

			return Cookie._cache[_cacheKeyPrefix + key];
		};

		Cookie.set = function (key, value, options) {
			options = _getExtendedOptions(options);
			options.expires = _getExpiresDate(value === undefined ? -1 : options.expires);

			_document.cookie = _generateCookieString(key, value, options);

			return Cookie;
		};

		Cookie.expire = function (key, options) {
			return Cookie.set(key, undefined, options);
		};

		Cookie.isEnabled = function () {
			return _enabled;
		};

		var _getExtendedOptions = function (options) {
			return {
				path   : options && options.path || Cookie.defaults.path,
				domain : options && options.domain || Cookie.defaults.domain,
				expires: options && options.expires || Cookie.defaults.expires,
				secure : options && options.secure !== undefined ? options.secure : Cookie.defaults.secure
			};
		};

		var _isValidDate = function (date) {
			return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.getTime());
		};

		var _getExpiresDate = function (expires, now) {
			now = now || new Date();

			if (typeof expires === 'number') {
				expires = expires === Infinity ?
				          _maxExpireDate : new Date(now.getTime() + expires * 1000);
			} else if (typeof expires === 'string') {
				expires = new Date(expires);
			}

			if (expires && !_isValidDate(expires)) {
				throw new Error('`expires` parameter cannot be converted to a valid Date instance');
			}

			return expires;
		};

		var _generateCookieString = function (key, value, options) {
			key = key.replace(/[^#$&+\^`|]/g, encodeURIComponent);
			key = key.replace(/\(/g, '%28').replace(/\)/g, '%29');
			value = (value + '').replace(/[^!#$&-+\--:<-\[\]-~]/g, encodeURIComponent);
			options = options || {};

			var cookieString = key + '=' + value;
			cookieString += options.path ? ';path=' + options.path : '';
			cookieString += options.domain ? ';domain=' + options.domain : '';
			cookieString += options.expires ? ';expires=' + options.expires.toUTCString() : '';
			cookieString += options.secure ? ';secure' : '';

			return cookieString;
		};

		var _getCacheFromString = function (documentCookie) {
			var cookieCache = {};
			var cookiesArray = documentCookie ? documentCookie.split('; ') : [];

			for (var i = 0; i < cookiesArray.length; i++) {
				var cookieKvp = _getKeyValuePairFromCookieString(cookiesArray[i]);

				if (cookieCache[_cacheKeyPrefix + cookieKvp.key] === undefined) {
					cookieCache[_cacheKeyPrefix + cookieKvp.key] = cookieKvp.value;
				}
			}

			return cookieCache;
		};

		var _getKeyValuePairFromCookieString = function (cookieString) {
			// "=" is a valid character in a cookie value according to RFC6265, so cannot `split('=')`
			var separatorIndex = cookieString.indexOf('=');

			// IE omits the "=" when the cookie value is an empty string
			separatorIndex = separatorIndex < 0 ? cookieString.length : separatorIndex;

			return {
				key  : decodeURIComponent(cookieString.substr(0, separatorIndex)),
				value: decodeURIComponent(cookieString.substr(separatorIndex + 1))
			};
		};

		var _renewCache = function () {
			Cookie._cache = _getCacheFromString(_document.cookie);
			Cookie._cachedDocumentCookie = _document.cookie;
		};

		var _areEnabled = function () {
			var testKey = 'Bs.Cookie';
			var areEnabled = Cookie.set(testKey, 1).get(testKey) === '1';
			Cookie.expire(testKey);
			return areEnabled;
		};

		var _enabled = _areEnabled();

		return Cookie;
	}
});
